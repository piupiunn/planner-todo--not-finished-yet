{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nexport const useFetch = function (url) {\n  _s();\n\n  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"GET\";\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(false);\n  const [error, setError] = useState(null);\n  const [options, setOptions] = useState(null);\n\n  const postData = postData => {\n    setOptions({\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(postData)\n    });\n  };\n\n  const delData = delData => {\n    setOptions({\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(delData)\n    });\n  };\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    const fetchData = async fetchOptions => {\n      setIsPending(true);\n\n      try {\n        const res = await fetch(url, { ...fetchOptions,\n          signal: controller.signal\n        });\n\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n\n        const json = await res.json();\n        setIsPending(false);\n        setData(json);\n        setError(null);\n      } catch (err) {\n        if (err.name === \"AbortError\") {\n          console.log(\"The fetch was aborted\");\n        } else {\n          setIsPending(false);\n          setError(\"Could not fetch the data\");\n        }\n      }\n    };\n\n    if (method === \"GET\") {\n      fetchData();\n    }\n\n    if (method === \"POST\" && options) {\n      fetchData(options);\n    }\n\n    return () => {\n      controller.abort();\n    };\n  }, [url, options, method]);\n  return {\n    data,\n    isPending,\n    error,\n    postData,\n    delData\n  };\n};\n\n_s(useFetch, \"jhtbsK3xAuNX1VobfPSE0u2qfvE=\");","map":{"version":3,"sources":["C:/Users/sukru/OneDrive/Masaüstü/Planner-Todo/planner-todo/src/hooks/useFetch.js"],"names":["useState","useEffect","useFetch","url","method","data","setData","isPending","setIsPending","error","setError","options","setOptions","postData","headers","body","JSON","stringify","delData","controller","AbortController","fetchData","fetchOptions","res","fetch","signal","ok","Error","statusText","json","err","name","console","log","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,QAAQ,GAAG,UAACC,GAAD,EAAyB;AAAA;;AAAA,MAAnBC,MAAmB,uEAAV,KAAU;AAC/C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;;AAEA,QAAMa,QAAQ,GAAIA,QAAD,IAAc;AAC7BD,IAAAA,UAAU,CAAC;AACTR,MAAAA,MAAM,EAAE,MADC;AAETU,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFA;AAKTC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeJ,QAAf;AALG,KAAD,CAAV;AAOD,GARD;;AAUA,QAAMK,OAAO,GAAIA,OAAD,IAAa;AAC3BN,IAAAA,UAAU,CAAC;AACTR,MAAAA,MAAM,EAAE,QADC;AAETU,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFA;AAKTC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeC,OAAf;AALG,KAAD,CAAV;AAOD,GARD;;AAUAjB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,UAAU,GAAG,IAAIC,eAAJ,EAAnB;;AAEA,UAAMC,SAAS,GAAG,MAAOC,YAAP,IAAwB;AACxCd,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,UAAI;AACF,cAAMe,GAAG,GAAG,MAAMC,KAAK,CAACrB,GAAD,EAAM,EAC3B,GAAGmB,YADwB;AAE3BG,UAAAA,MAAM,EAAEN,UAAU,CAACM;AAFQ,SAAN,CAAvB;;AAIA,YAAI,CAACF,GAAG,CAACG,EAAT,EAAa;AACX,gBAAM,IAAIC,KAAJ,CAAUJ,GAAG,CAACK,UAAd,CAAN;AACD;;AACD,cAAMC,IAAI,GAAG,MAAMN,GAAG,CAACM,IAAJ,EAAnB;AAEArB,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,QAAAA,OAAO,CAACuB,IAAD,CAAP;AACAnB,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,OAbD,CAaE,OAAOoB,GAAP,EAAY;AACZ,YAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;AAC7BC,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD,SAFD,MAEO;AACLzB,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,UAAAA,QAAQ,CAAC,0BAAD,CAAR;AACD;AACF;AACF,KAxBD;;AA0BA,QAAIN,MAAM,KAAK,KAAf,EAAsB;AACpBiB,MAAAA,SAAS;AACV;;AACD,QAAIjB,MAAM,KAAK,MAAX,IAAqBO,OAAzB,EAAkC;AAChCU,MAAAA,SAAS,CAACV,OAAD,CAAT;AACD;;AAED,WAAO,MAAM;AACXQ,MAAAA,UAAU,CAACe,KAAX;AACD,KAFD;AAGD,GAvCQ,EAuCN,CAAC/B,GAAD,EAAMQ,OAAN,EAAeP,MAAf,CAvCM,CAAT;AAyCA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA,KAAnB;AAA0BI,IAAAA,QAA1B;AAAoCK,IAAAA;AAApC,GAAP;AACD,CApEM;;GAAMhB,Q","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nexport const useFetch = (url, method = \"GET\") => {\r\n  const [data, setData] = useState(null);\r\n  const [isPending, setIsPending] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [options, setOptions] = useState(null);\r\n\r\n  const postData = (postData) => {\r\n    setOptions({\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(postData),\r\n    });\r\n  };\r\n\r\n  const delData = (delData) => {\r\n    setOptions({\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(delData),\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n\r\n    const fetchData = async (fetchOptions) => {\r\n      setIsPending(true);\r\n\r\n      try {\r\n        const res = await fetch(url, {\r\n          ...fetchOptions,\r\n          signal: controller.signal,\r\n        });\r\n        if (!res.ok) {\r\n          throw new Error(res.statusText);\r\n        }\r\n        const json = await res.json();\r\n\r\n        setIsPending(false);\r\n        setData(json);\r\n        setError(null);\r\n      } catch (err) {\r\n        if (err.name === \"AbortError\") {\r\n          console.log(\"The fetch was aborted\");\r\n        } else {\r\n          setIsPending(false);\r\n          setError(\"Could not fetch the data\");\r\n        }\r\n      }\r\n    };\r\n\r\n    if (method === \"GET\") {\r\n      fetchData();\r\n    }\r\n    if (method === \"POST\" && options) {\r\n      fetchData(options);\r\n    }\r\n\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n  }, [url, options, method]);\r\n\r\n  return { data, isPending, error, postData, delData };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}